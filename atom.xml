<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bios000</title>
  
  <subtitle>Praise The Mark Of Unknown</subtitle>
  <link href="http://bios000.github.io/atom.xml" rel="self"/>
  
  <link href="http://bios000.github.io/"/>
  <updated>2023-02-28T03:49:53.580Z</updated>
  <id>http://bios000.github.io/</id>
  
  <author>
    <name>bios000</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于ORM的一些小Tips</title>
    <link href="http://bios000.github.io/2023/02/28/orm_1/"/>
    <id>http://bios000.github.io/2023/02/28/orm_1/</id>
    <published>2023-02-27T16:02:22.677Z</published>
    <updated>2023-02-28T03:49:53.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开发中的大部分功能本质都是对数据库的操作，之前一直遇到 <strong>nyconnnections</strong>  这个错误估计也是由于代码质量不高,对数据库的重复操作次数以及连接数太多导致的。自己通过django对数据库的操作主要是通过ORM,所以掌握关于ORM能够减少查询的tips确实能够帮助提升很大一部分性能。<br>这里赞美GPT，感谢GPT给出的各种优化方案。这里也顺便记录一下关于数据库操作遇到的一些小技巧，以后拒绝只用get fliter</p><h2 id="关于查询"><a href="#关于查询" class="headerlink" title="关于查询"></a>关于查询</h2><blockquote><p>当你查询单个主对象或主对象列表并需要在模板 或其它地方中使用到每个对象的关联对象信息时，请一定记住使用select_related和prefetch_related一次性获取所有对象信息，从而提升数据库查询效率，避免重复查询。</p></blockquote><p>这部分的优化场景，主要是针对关联查询的两个方法的示例</p><h3 id="select-related-的使用方法"><a href="#select-related-的使用方法" class="headerlink" title="select_related 的使用方法"></a>select_related 的使用方法</h3><p>#select_related</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">task_config_item_record = TaskConfigItem.objects.<span class="built_in">filter</span>(  </span><br><span class="line">    task__user=user_id,  </span><br><span class="line">    task__status=<span class="number">1</span>,  </span><br><span class="line">    task__show_dashboard=<span class="number">1</span>  </span><br><span class="line">).select_related(<span class="string">&#x27;template&#x27;</span>, <span class="string">&#x27;task_config&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url_list = [  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="string">&quot;task_name&quot;</span>: tci.task.name,  </span><br><span class="line">        tci.template.name: get_payload(tci.task_config.key, tci.template.payload)  </span><br><span class="line">    &#125; <span class="keyword">for</span> tci <span class="keyword">in</span> task_config_item_record[:<span class="number">30</span>]  </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>当在一对一或者一对多的使用场景中，可以用select_related来一次性获取住对象及相关对象的信息<br>会有一些其他的使用情况 #selected_related_demo </p><h3 id="prefetch-related的使用方法"><a href="#prefetch-related的使用方法" class="headerlink" title="prefetch_related的使用方法"></a>prefetch_related的使用方法</h3><p>对于多对多的数据表关联信息查询一般不回用select_related方法，这样做是避免做JOIN操作造成最后的表非常大</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 文章列表及每篇文章的tags对象名字信息</span><br><span class="line">Article.objects.all().prefetch_related(&#x27;tags__name&#x27;)</span><br><span class="line"></span><br><span class="line"># 获取id=13的文章对象同时，获取其相关tags信息</span><br><span class="line">Article.objects.prefetch_related(&#x27;tags&#x27;).get(id=13)</span><br></pre></td></tr></table></figure><p>其他利用场景 #prefetch_related_demo</p><h3 id="in-bulk"><a href="#in-bulk" class="headerlink" title="in_bulk"></a>in_bulk</h3><p>#in_bulk<br>in_bulk() 接受一个 id 值列表并返回一个字典，将每个 id 映射到具有该 id 的对象实例。如果不将列表传递给 in_bulk() 方法，则将返回所有对象。<br>假设我只想检索 id 为 1 和 4 的学生，我可以这样做。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; </span><br><span class="line">students = Student.objects.in_bulk([1, 4])</span><br><span class="line">&gt;&gt;&gt; students[1].name</span><br><span class="line">&#x27;Regina Johnson&#x27;</span><br><span class="line">&gt;&gt;&gt; students[4].name</span><br><span class="line">&#x27;Jessie Smith&#x27;</span><br></pre></td></tr></table></figure><h2 id="关于创建"><a href="#关于创建" class="headerlink" title="关于创建"></a>关于创建</h2><p>对于for循环的数据对象进行保存，那就会导致每次循环都要保存一次数据，这样会增加开销，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> nums.isdigit() <span class="keyword">and</span> <span class="built_in">int</span>(nums) &gt; <span class="number">0</span>:</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(nums)):</span><br><span class="line">         device = Device(</span><br><span class="line">             category=category,</span><br><span class="line">             seat=seat_obj,</span><br><span class="line">             asset_code=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">             asset_num=<span class="string">&#x27;V&#123;&#125;-&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(category.name, <span class="built_in">str</span>(i).zfill(<span class="number">4</span>)),  <span class="comment"># V类型-0001编号</span></span><br><span class="line">             use_info=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">             operator=operator,</span><br><span class="line">             op_type=<span class="number">1</span></span><br><span class="line">         )</span><br><span class="line">         device.save()  <span class="comment"># 每次save()的时候都会访问一次数据库。导致性能问题</span></span><br></pre></td></tr></table></figure><p>针对于这种情况我们选择先批量创建对象，最后使用bulk_create一次保存到数据库<br>#bulk_create</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">```text</span><br><span class="line">device_obj_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(nums)):</span><br><span class="line">        device_obj_list.append(</span><br><span class="line">            Device(</span><br><span class="line">                category=category,</span><br><span class="line">                seat=seat_obj,</span><br><span class="line">                asset_code=<span class="string">&#x27;---&#x27;</span>,</span><br><span class="line">                asset_num=<span class="string">&#x27;&#123;&#125;-xxxx&#x27;</span>.<span class="built_in">format</span>(category.name),  <span class="comment"># 类型-xxxx</span></span><br><span class="line">                use_info=<span class="string">&#x27;---&#x27;</span>,</span><br><span class="line">                operator=operator,</span><br><span class="line">                op_type=<span class="number">1</span></span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    Device.objects.bulk_create(device_obj_list)  <span class="comment"># 使用django.db.models.query.QuerySet.bulk_create()批量创建对象，减少SQL查询次数</span></span><br><span class="line">    messages.info(request, <span class="string">&#x27;批量添加&#123;&#125;条数据完成！&#x27;</span>.<span class="built_in">format</span>(nums))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;开发中的大部分功能本质都是对数据库的操作，之前一直遇到 &lt;strong&gt;nyconnnections&lt;/strong&gt;  这个错误估计也是由</summary>
      
    
    
    
    
  </entry>
  
</feed>
