<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bios000</title>
  
  <subtitle>Praise The Mark Of Unknown</subtitle>
  <link href="http://bios000.github.io/atom.xml" rel="self"/>
  
  <link href="http://bios000.github.io/"/>
  <updated>2023-03-22T12:10:45.134Z</updated>
  <id>http://bios000.github.io/</id>
  
  <author>
    <name>bios000</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《Java 安全漫谈一反射篇》笔记</title>
    <link href="http://bios000.github.io/2023/03/22/%E3%80%8AJava-%E5%AE%89%E5%85%A8%E6%BC%AB%E8%B0%88%E4%B8%80%E5%8F%8D%E5%B0%84%E7%AF%87%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://bios000.github.io/2023/03/22/%E3%80%8AJava-%E5%AE%89%E5%85%A8%E6%BC%AB%E8%B0%88%E4%B8%80%E5%8F%8D%E5%B0%84%E7%AF%87%E3%80%8B%E7%AC%94%E8%AE%B0/</id>
    <published>2023-03-22T12:07:26.000Z</published>
    <updated>2023-03-22T12:10:45.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于反射"><a href="#关于反射" class="headerlink" title="关于反射"></a>关于反射</h2><p>这里建议先阅读[[java反射学习]]</p><p>作者将反射作为漫谈的第一部分内容</p><blockquote><p>对象可以通过反射获取他的类，类可以通过反射拿到所有的方法(包括私有)，拿到的方法可以调用，这就是动态特性–”一段代码，改变其中的变量，将会导致这段代码产生功能性的变化“</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String className，String methodName)</span> thorw Exception&#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">clazz</span> = class.forName(<span class="keyword">class</span> <span class="title class_">Name</span>);</span><br><span class="line">clazz.get(methodName).invoke(clazz.newInstance());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作者讲了三种通过类反射的执行payload的方法，这里就直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// forName()  </span></span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(  </span><br><span class="line">                    Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(  </span><br><span class="line">                            Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)), <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;  </span><br><span class="line">            );  </span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// getClass()  </span></span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            sc.getClass().forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(  </span><br><span class="line">                    Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(  </span><br><span class="line">                            Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)), <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;  </span><br><span class="line">            );  </span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//.class  </span></span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            Scanner.class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(  </span><br><span class="line">                    Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(  </span><br><span class="line">                            Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)), <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;  </span><br><span class="line">            );  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看着挺长，这里建议弄清Class类[[java反射学习#Class 类的方法]]中<code>getMethod()</code>和[[java反射学习#Method 类方法]]中的<code>invoke()</code>就能其中的含义，主要就在于<code>exec</code>需要<code>Runtime</code>对象来执行<br>写个拆分的代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectTest05</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, IOException &#123;  </span><br><span class="line">        <span class="comment">// 执行命令  </span></span><br><span class="line">        String[] cmd = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;;  </span><br><span class="line">        <span class="comment">// 获取方法  </span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">methodExec</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;exec&quot;</span>, String.class);  </span><br><span class="line">        <span class="comment">//反射生成java.lang.Runtime.getRuntime() 方法，实际运行时返回的是RunTime的实例化对象 -- getRuntime()对象  </span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">methodGetRuntime</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>);  </span><br><span class="line">        <span class="comment">//反射生成java.lang.Runtime.getRuntime类 -- Runtime        Class clazzRunTime = Class.forName(&quot;java.lang.Runtime&quot;);  </span></span><br><span class="line">        <span class="comment">//执行命令  </span></span><br><span class="line">        methodExec.invoke(methodGetRuntime.invoke(clazzRunTime), cmd);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//集合版  </span></span><br><span class="line">        Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(  </span><br><span class="line">                Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(                     Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)  </span><br><span class="line">                ), cmd  </span><br><span class="line">        );  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写的目的是为了通过反射机制，动态地调用java.lang.Runtime类的exec方法，执行一个命令。cmd是一个字符串参数，表示要执行的命令。</p><p>具体来说，这样写的步骤如下：</p><ol><li>用Class.forName(“java.lang.Runtime”)获取java.lang.Runtime类的Class对象¹³。</li><li>用Class对象的getMethod方法，获取Runtime类的exec方法和getRuntime方法的Method对象¹⁴。注意，exec方法需要指定参数类型为String.class，getRuntime方法不需要参数类型。</li><li>用getRuntime方法的Method对象的invoke方法，调用Runtime类的静态方法getRuntime，返回一个Runtime实例²⁴。注意，invoke方法需要传入一个null参数，表示不需要指定对象。</li><li>用exec方法的Method对象的invoke方法，调用Runtime实例的exec方法，执行cmd命令²⁴。注意，invoke方法需要传入两个参数：一个是Runtime实例，一个是cmd字符串。</li></ol><p>这里我其实就已经产生疑问了，为啥要写那么长呢，我们明明已经学过[[java反射学习#Class 类的方法]]中的<code>newInstance()</code>方法了<br>直接写成下面这种方式不行吗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(</span><br><span class="line"><span class="string">&quot;exec&quot;</span>,String.class).invoke(</span><br><span class="line">Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).newInstance(),<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p>结果作者在第二篇文章中给我解答了，<code>class.newInstance()</code>方法调用的是这个类的无参数构造方法，并且必须保证无参数类构造器是共有的<br>这里我觉得还是先说一下这个方法是干啥的 #newInstance </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class.newInstance()是一个反射方法，用于创建类的实例，他的作用相当于使用new关键字调用类的无参数构造器。但是它有一些限制和不足,比如</span><br><span class="line"></span><br><span class="line">1. 他只能调用无参数构造器，不能传递参数</span><br><span class="line">2. 他要求被调用的构造器是public类型的，不能调用私有的构造器</span><br><span class="line">3. 它会抛出所有由被调用的构造器抛出的异常</span><br></pre></td></tr></table></figure><p>由于<code>java.lang.Runtime</code>类是[[单例模式]]，其构造方法是私有的，只能通过<code>Runtime.getRuntime()</code>来获取到<code>Runtime</code>对象</p><p>在这里ChatGPT给出了一个新的思路就是如何拿到私有类型构造器实例化，他使用了<code>Constructor.newInstance()</code>方法代替<code>Class.newInstance()</code><br><code>Constructor.newInstance()</code> 可以调用任意类型和参数个数的构造器(其实作者在第三篇也提到这个问题了)<br>具体代码示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取Runtime类的Class对象</span></span><br><span class="line">Class&lt;Runtime&gt; runtimeClass =Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="comment">// 获取Runtime类的私有构造器</span></span><br><span class="line">Constructor&lt;Runtime&gt; runtimeConstructor = runtimeClass.getDeclaredConstructor();</span><br><span class="line"><span class="comment">// 设置构造器的可访问性为true</span></span><br><span class="line">runtimeConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 通过构造器创建一个Runtime类的实例对象</span></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> runtimeConstructor.newInstance();</span><br><span class="line"><span class="comment">// 通过反射调用exec方法</span></span><br><span class="line">runtimeClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(runtime, <span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里还提到了一个<code>invoke</code>的使用 #invoke</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">invoke 的作用是执行方法，他的第一个参数是：</span><br><span class="line"></span><br><span class="line">如果这个方法是普通方法，那么第一个参数就是类对象</span><br><span class="line">如果这个方法是静态方法，那么第一个参数就是累</span><br></pre></td></tr></table></figure><p>作者还提到了一种情况，就是如果我想要反射的类是没有无参数构造方法，怎么办，其实还是可以用到<code>Constructor.getDeclaredConstructor</code>与<code>Consturctor.getConstructor</code>两个方法</p><p>这里作者是以另一种命令执行的方式进行演示的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>)</span><br><span class="line">((ProcessBuilder) claazz.getConsturcot(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>))).start();</span><br></pre></td></tr></table></figure><p>这里用到ProcessBuilder两个构造函数的第一个形式，但是你会发现这里用到了强转</p><ul><li>public ProcessBuilder(List command) </li><li>public ProcessBuilder(String… command)</li></ul><p>一般利用漏洞的时候是没有这种语法的所以就需要使用反射来完成这一步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>).getMethod(<span class="string">&quot;start&quot;</span>).invoke(</span><br><span class="line">Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>).getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>).getMethod(<span class="string">&quot;start&quot;</span>).invoke(  Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>).getConstructor(String[].class).newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;&#125;));</span><br></pre></td></tr></table></figure><p>然后根据一道题的wp去引出其中的作用，主要是绕过沙箱限制[[安全基础&#x2F;代码审计&#x2F;Java安全漫谈&#x2F;反射&#x2F;Code-Breaking Puzzles — javacon WriteUp - Ruilin]]</p><h2 id="关于类初始化的一点小tips"><a href="#关于类初始化的一点小tips" class="headerlink" title="关于类初始化的一点小tips"></a>关于类初始化的一点小tips</h2><p>作者首先讲了关于<code>forName</code> 一共有两个重载，其中一个是我们常用的</p><ul><li><code>Class&lt;?&gt; forName(String name)</code><br>而另一个是</li><li><code>Class&lt;?&gt; forName(String name， **boolean** initialize, ClassLoder loader)</code><br>这里面第二个参数代表是否初始化，第三个参数就是ClassLoader</li></ul><p>这里有两个tips需要搞清楚<br>第一个是关于<code>.class</code>和<code>forName()</code> 的区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用`.class`来创建Class对象的引用时，不会自动初始化该Class对象，但是使用forName()回自动初始化该Class对象</span><br></pre></td></tr></table></figure><p>第二个注意点就是弄清楚类的初始化的流程<br>这里作者举了一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trainprint</span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;Empty block initial &amp;s\n&quot;</span>,<span class="built_in">this</span>.getclass()); <span class="comment">//1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;Static initial &amp;s\n&quot;</span>,TrainPrint.class); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Trainprint</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;Initial &amp;s\n&quot;</span>,<span class="built_in">this</span>.getclass()); <span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>类初始化执行的流程是，先执行static静态方法(2)，再执行代码块代码(3),最后是构造函数(3)</p><p>所以根据该特性，我们如果可以控制反射的类名，就可以尝试编写一个恶意类，把恶意代码放在<code>static()</code>中</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于反射&quot;&gt;&lt;a href=&quot;#关于反射&quot; class=&quot;headerlink&quot; title=&quot;关于反射&quot;&gt;&lt;/a&gt;关于反射&lt;/h2&gt;&lt;p&gt;这里建议先阅读[[java反射学习]]&lt;/p&gt;
&lt;p&gt;作者将反射作为漫谈的第一部分内容&lt;/p&gt;
&lt;blockquote&gt;
&lt;</summary>
      
    
    
    
    
    <category term="《Java 安全漫谈》笔记" scheme="http://bios000.github.io/tags/%E3%80%8AJava-%E5%AE%89%E5%85%A8%E6%BC%AB%E8%B0%88%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>关于ORM的一些TipS</title>
    <link href="http://bios000.github.io/2023/02/28/orm_1/"/>
    <id>http://bios000.github.io/2023/02/28/orm_1/</id>
    <published>2023-02-27T16:02:22.677Z</published>
    <updated>2023-03-01T15:51:41.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开发中的大部分功能本质都是对数据库的操作，之前一直遇到 <strong>nyconnnections</strong>  这个错误估计也是代码质量不高导致,<br>所以对数据库的重复操作次数以及连接数太多导致的。自己通过django对数据库的操作主要是通过ORM,所以掌握关于ORM能够减少查询的tips确实能够帮助提升很大一部分性能。<br>在这里赞美GPT,给了非常多的优化方案</p><h2 id="关于查询"><a href="#关于查询" class="headerlink" title="关于查询"></a>关于查询</h2><blockquote><p>当你查询单个主对象或主对象列表并需要在模板<br>或其它地方中使用到每个对象的关联对象信息时，请一定记住使用select_related和prefetch_related一次性获取所有对象信息，从而提升数据库查询效率，避免重复查询。</p></blockquote><p>这部分的优化场景，主要是针对关联查询的两个方法的示例</p><h3 id="select-related-的使用方法"><a href="#select-related-的使用方法" class="headerlink" title="select_related 的使用方法"></a>select_related 的使用方法</h3><p>#select_related</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">task_config_item_record = TaskConfigItem.objects.<span class="built_in">filter</span>(</span><br><span class="line">    task__user=user_id,</span><br><span class="line">    task__status=<span class="number">1</span>,</span><br><span class="line">    task__show_dashboard=<span class="number">1</span></span><br><span class="line">).select_related(<span class="string">&#x27;template&#x27;</span>, <span class="string">&#x27;task_config&#x27;</span>)</span><br><span class="line"></span><br><span class="line">url_list = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;task_name&quot;</span>: tci.task.name,</span><br><span class="line">        tci.template.name: get_payload(tci.task_config.key, tci.template.payload)</span><br><span class="line">    &#125; <span class="keyword">for</span> tci <span class="keyword">in</span> task_config_item_record[:<span class="number">30</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>当在一对一或者一对多的使用场景中，可以用select_related来一次性获取住对象及相关对象的信息<br>会有一些其他的使用情况 #selected_related_demo</p><h3 id="prefetch-related的使用方法"><a href="#prefetch-related的使用方法" class="headerlink" title="prefetch_related的使用方法"></a>prefetch_related的使用方法</h3><p>对于多对多的数据表关联信息查询一般不回用select_related方法，这样做是避免做JOIN操作造成最后的表非常大</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 文章列表及每篇文章的tags对象名字信息</span><br><span class="line">Article.objects.all().prefetch_related(&#x27;tags__name&#x27;)</span><br><span class="line"></span><br><span class="line"># 获取id=13的文章对象同时，获取其相关tags信息</span><br><span class="line">Article.objects.prefetch_related(&#x27;tags&#x27;).get(id=13)</span><br></pre></td></tr></table></figure><p>其他利用场景 #prefetch_related_demo</p><h3 id="in-bulk"><a href="#in-bulk" class="headerlink" title="in_bulk"></a>in_bulk</h3><p>#in_bulk<br>in_bulk() 接受一个 id 值列表并返回一个字典，将每个 id 映射到具有该 id 的对象实例。如果不将列表传递给 in_bulk()<br>方法，则将返回所有对象。<br>假设我只想检索 id 为 1 和 4 的学生，我可以这样做。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; </span><br><span class="line">students = Student.objects.in_bulk([1, 4])</span><br><span class="line">&gt;&gt;&gt; students[1].name</span><br><span class="line">&#x27;Regina Johnson&#x27;</span><br><span class="line">&gt;&gt;&gt; students[4].name</span><br><span class="line">&#x27;Jessie Smith&#x27;</span><br></pre></td></tr></table></figure><h3 id="关于聚合查询"><a href="#关于聚合查询" class="headerlink" title="关于聚合查询"></a>关于聚合查询</h3><h4 id="annotate"><a href="#annotate" class="headerlink" title="annotate"></a>annotate</h4><p>#annotate<br>主要用于跨表查询，作用于queryset,其实就是给Queryset添加一个属性，Queryset中的每个对象都会有那么一个属性，属性可以是模型中的字段<br>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 品牌模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Brand</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">20</span>, unique=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;名称&#x27;</span>)</span><br><span class="line">    location = models.CharField(max_length=<span class="number">30</span>, default=<span class="string">&#x27;中国&#x27;</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;品牌所属地区&#x27;</span>)</span><br><span class="line">    logo = models.ImageField(null=<span class="literal">True</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;Logo图片&#x27;</span>)</span><br><span class="line">    create_time = models.DateField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;创建时间&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 商品模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span>(models.Model):</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">&#x27;名称&#x27;</span>)</span><br><span class="line">    sales = models.IntegerField(default=<span class="number">0</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;销量&#x27;</span>)</span><br><span class="line">    comments = models.IntegerField(default=<span class="number">0</span>, null=<span class="literal">True</span>, blank=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;评价数&#x27;</span>)</span><br><span class="line">    brand = models.ForeignKey(Brand, null=<span class="literal">True</span>, on_delete=models.PROTECT, verbose_name=<span class="string">&#x27;所属品牌&#x27;</span>)</span><br><span class="line">    create_time = models.DateField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">&#x27;创建日期&#x27;</span>)</span><br></pre></td></tr></table></figure><p>商品模型中 <code>brand</code>字段就是外键，关联的品牌<code>Brand</code><br>当我想查询每个品牌下对应商品的数量时，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询每个品牌下的商品数量，结果为一个queryset，并且每个对象都有一个num_count属性，这个属性的值就是每个品牌下的商品数量。</span></span><br><span class="line">result = Brand.objects.annotate(num_count=Count(<span class="string">&#x27;goods&#x27;</span>))  <span class="comment"># Sun(类型小写)</span></span><br><span class="line">result[<span class="number">0</span>].num_count  <span class="comment"># 获取num_count属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 与values合用，相当于按values的值进行分组聚合</span></span><br><span class="line">result = Brand.objects.values(<span class="string">&#x27;name&#x27;</span>).annotate(num_count=Count(<span class="string">&#x27;goods&#x27;</span>))</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">&lt; QuerySet[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;oppo&#x27;</span>, <span class="string">&#x27;num_count&#x27;</span>: <span class="number">0</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;华为&#x27;</span>, <span class="string">&#x27;num_count&#x27;</span>: <span class="number">3</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;num_count&#x27;</span>: <span class="number">0</span>&#125;, &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;苹果&#x27;</span>, <span class="string">&#x27;num_count&#x27;</span>: <span class="number">3</span>&#125;] &gt;</span><br><span class="line"><span class="comment"># 对应的sql</span></span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">`tb_brand`.`name`, COUNT(`tb_goods`.`<span class="built_in">id</span>`) AS`num_count`</span><br><span class="line">FROM `tb_brand` LEFT OUTER JOIN `tb_goods`</span><br><span class="line">ON(`tb_brand`.`<span class="built_in">id</span>` = `tb_goods`.`brand_id`) GROUP</span><br><span class="line">BY `tb_brand`.`name` ORDER BY</span><br><span class="line">NULL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询每个品牌下商品的销量</span></span><br><span class="line">result = Brand.objects.values(<span class="string">&#x27;name&#x27;</span>).annotate(sale_count=Sum(<span class="string">&#x27;goods__sales&#x27;</span>))  <span class="comment"># 类名小写__字段</span></span><br><span class="line"></span><br><span class="line">—</span><br></pre></td></tr></table></figure><p>关于Antenna中的聚合查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message_date_count = message_record.annotate(date=TruncDate(<span class="string">&#x27;create_time&#x27;</span>)).values(<span class="string">&#x27;date&#x27;</span>).</span><br><span class="line">annotate(count=Count(<span class="string">&#x27;id&#x27;</span>)).order_by(<span class="string">&#x27;date&#x27;</span>)</span><br></pre></td></tr></table></figure><p>使用annotate()方法计算每天消息的数量，使用values()方法来指定查询的字段，使用TruncDate()[[TruncDate]]<br>方法来截取日期，使用Count()方法进行聚合计算，最后使用order_by()方法排序。</p><h4 id="aggregate"><a href="#aggregate" class="headerlink" title="aggregate"></a>aggregate</h4><p>#aggregate<br>也是作用于queryset,对某列进行如下操作：</p><ul><li>Sum:求和</li><li>Count：数量</li><li>Avg:平均</li><li>Max:求最大值</li><li>Min:求最小值</li><li>Variance:计算方差</li><li>StdDev:计算标准差</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对商品销量取平均值,求和</span></span><br><span class="line">result = Goods.objects.<span class="built_in">all</span>().aggregate(avg=Avg(<span class="string">&#x27;sales&#x27;</span>), <span class="built_in">sum</span>=Sum(<span class="string">&#x27;sales&#x27;</span>))</span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line">&#123;<span class="string">&#x27;avg&#x27;</span>: <span class="number">3.625</span>, <span class="string">&#x27;sum&#x27;</span>: <span class="number">29</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="关于创建"><a href="#关于创建" class="headerlink" title="关于创建"></a>关于创建</h2><p>对于for循环的数据对象进行保存，那就会导致每次循环都要保存一次数据，这样会增加开销，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> nums.isdigit() <span class="keyword">and</span> <span class="built_in">int</span>(nums) &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(nums)):</span><br><span class="line">        device = Device(</span><br><span class="line">            category=category,</span><br><span class="line">            seat=seat_obj,</span><br><span class="line">            asset_code=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            asset_num=<span class="string">&#x27;V&#123;&#125;-&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(category.name, <span class="built_in">str</span>(i).zfill(<span class="number">4</span>)),  <span class="comment"># V类型-0001编号</span></span><br><span class="line">            use_info=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            operator=operator,</span><br><span class="line">            op_type=<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        device.save()  <span class="comment"># 每次save()的时候都会访问一次数据库。导致性能问题</span></span><br></pre></td></tr></table></figure><p>针对于这种情况我们选择先批量创建对象，最后使用bulk_create一次保存到数据库<br>#bulk_create</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">device_obj_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(nums)):</span><br><span class="line">    device_obj_list.append(</span><br><span class="line">        Device(</span><br><span class="line">            category=category,</span><br><span class="line">            seat=seat_obj,</span><br><span class="line">            asset_code=<span class="string">&#x27;---&#x27;</span>,</span><br><span class="line">            asset_num=<span class="string">&#x27;&#123;&#125;-xxxx&#x27;</span>.<span class="built_in">format</span>(category.name),  <span class="comment"># 类型-xxxx</span></span><br><span class="line">            use_info=<span class="string">&#x27;---&#x27;</span>,</span><br><span class="line">            operator=operator,</span><br><span class="line">            op_type=<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">Device.objects.bulk_create(device_obj_list)  <span class="comment"># 使用django.db.models.query.QuerySet.bulk_create()批量创建对象，减少SQL查询次数</span></span><br><span class="line">messages.info(request, <span class="string">&#x27;批量添加&#123;&#125;条数据完成！&#x27;</span>.<span class="built_in">format</span>(nums))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;开发中的大部分功能本质都是对数据库的操作，之前一直遇到 &lt;strong&gt;nyconnnections&lt;/strong&gt;  这个错误估计也是代</summary>
      
    
    
    
    
  </entry>
  
</feed>
